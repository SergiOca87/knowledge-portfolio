# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  publicEmail: Boolean
  password: PasswordState
  specialization: String
  items(
    where: ItemWhereInput! = {}
    orderBy: [ItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Item!]
  itemsCount(where: ItemWhereInput! = {}): Int
  sent(
    where: MessageWhereInput! = {}
    orderBy: [MessageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Message!]
  sentCount(where: MessageWhereInput! = {}): Int
  received(
    where: MessageWhereInput! = {}
    orderBy: [MessageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Message!]
  receivedCount(where: MessageWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  options: JSON
  following(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  followingCount(where: UserWhereInput! = {}): Int
  followers(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  followersCount(where: UserWhereInput! = {}): Int
  public: Boolean
  linkedin: String
  instagram: String
  youtube: String
  website: String
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: PasswordState
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  publicEmail: BooleanFilter
  specialization: StringFilter
  items: ItemManyRelationFilter
  sent: MessageManyRelationFilter
  received: MessageManyRelationFilter
  categories: CategoryManyRelationFilter
  following: UserManyRelationFilter
  followers: UserManyRelationFilter
  public: BooleanFilter
  linkedin: StringFilter
  instagram: StringFilter
  youtube: StringFilter
  website: StringFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
  magicAuthToken: PasswordFilter
  magicAuthIssuedAt: DateTimeNullableFilter
  magicAuthRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ItemManyRelationFilter {
  every: ItemWhereInput
  some: ItemWhereInput
  none: ItemWhereInput
}

input MessageManyRelationFilter {
  every: MessageWhereInput
  some: MessageWhereInput
  none: MessageWhereInput
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  publicEmail: OrderDirection
  specialization: OrderDirection
  public: OrderDirection
  linkedin: OrderDirection
  instagram: OrderDirection
  youtube: OrderDirection
  website: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
  magicAuthIssuedAt: OrderDirection
  magicAuthRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  publicEmail: Boolean
  password: String
  specialization: String
  items: ItemRelateToManyForUpdateInput
  sent: MessageRelateToManyForUpdateInput
  received: MessageRelateToManyForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  options: JSON
  following: UserRelateToManyForUpdateInput
  followers: UserRelateToManyForUpdateInput
  public: Boolean
  linkedin: String
  instagram: String
  youtube: String
  website: String
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input ItemRelateToManyForUpdateInput {
  disconnect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

input MessageRelateToManyForUpdateInput {
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  create: [MessageCreateInput!]
  connect: [MessageWhereUniqueInput!]
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  publicEmail: Boolean
  password: String
  specialization: String
  items: ItemRelateToManyForCreateInput
  sent: MessageRelateToManyForCreateInput
  received: MessageRelateToManyForCreateInput
  categories: CategoryRelateToManyForCreateInput
  options: JSON
  following: UserRelateToManyForCreateInput
  followers: UserRelateToManyForCreateInput
  public: Boolean
  linkedin: String
  instagram: String
  youtube: String
  website: String
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input ItemRelateToManyForCreateInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

input MessageRelateToManyForCreateInput {
  create: [MessageCreateInput!]
  connect: [MessageWhereUniqueInput!]
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Item {
  id: ID!
  title: String
  status: String
  date: String
  visibility: String
  description: String
  singlePageContent: JSON
  image: String
  author: User
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  urlTitle: String
  url: String
}

input ItemWhereUniqueInput {
  id: ID
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringFilter
  date: StringFilter
  visibility: StringFilter
  description: StringFilter
  image: StringFilter
  author: UserWhereInput
  categories: CategoryManyRelationFilter
  urlTitle: StringFilter
  url: StringFilter
}

input ItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  date: OrderDirection
  visibility: OrderDirection
  description: OrderDirection
  image: OrderDirection
  urlTitle: OrderDirection
  url: OrderDirection
}

input ItemUpdateInput {
  title: String
  status: String
  date: String
  visibility: String
  description: String
  singlePageContent: JSON
  image: String
  author: UserRelateToOneForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  urlTitle: String
  url: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ItemUpdateArgs {
  where: ItemWhereUniqueInput!
  data: ItemUpdateInput!
}

input ItemCreateInput {
  title: String
  status: String
  date: String
  visibility: String
  description: String
  singlePageContent: JSON
  image: String
  author: UserRelateToOneForCreateInput
  categories: CategoryRelateToManyForCreateInput
  urlTitle: String
  url: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  items(
    where: ItemWhereInput! = {}
    orderBy: [ItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Item!]
  itemsCount(where: ItemWhereInput! = {}): Int
  author: User
  icon: String
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  items: ItemManyRelationFilter
  author: UserWhereInput
  icon: StringFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  icon: OrderDirection
}

input CategoryUpdateInput {
  name: String
  items: ItemRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  icon: String
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  items: ItemRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  icon: String
}

type Message {
  id: ID!
  text: String
  sender: User
  receiver: User
}

input MessageWhereUniqueInput {
  id: ID
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  id: IDFilter
  text: StringFilter
  sender: UserWhereInput
  receiver: UserWhereInput
}

input MessageOrderByInput {
  id: OrderDirection
  text: OrderDirection
}

input MessageUpdateInput {
  text: String
  sender: UserRelateToOneForUpdateInput
  receiver: UserRelateToOneForUpdateInput
}

input MessageUpdateArgs {
  where: MessageWhereUniqueInput!
  data: MessageUpdateInput!
}

input MessageCreateInput {
  text: String
  sender: UserRelateToOneForCreateInput
  receiver: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createItem(data: ItemCreateInput!): Item
  createItems(data: [ItemCreateInput!]!): [Item]
  updateItem(where: ItemWhereUniqueInput!, data: ItemUpdateInput!): Item
  updateItems(data: [ItemUpdateArgs!]!): [Item]
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteItems(where: [ItemWhereUniqueInput!]!): [Item]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createMessage(data: MessageCreateInput!): Message
  createMessages(data: [MessageCreateInput!]!): [Message]
  updateMessage(
    where: MessageWhereUniqueInput!
    data: MessageUpdateInput!
  ): Message
  updateMessages(data: [MessageUpdateArgs!]!): [Message]
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteMessages(where: [MessageWhereUniqueInput!]!): [Message]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  sendUserMagicAuthLink(email: String!): Boolean!
  redeemUserMagicAuthToken(
    email: String!
    token: String!
  ): RedeemUserMagicAuthTokenResult!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

union RedeemUserMagicAuthTokenResult =
    RedeemUserMagicAuthTokenSuccess
  | RedeemUserMagicAuthTokenFailure

type RedeemUserMagicAuthTokenSuccess {
  token: String!
  item: User!
}

type RedeemUserMagicAuthTokenFailure {
  code: MagicLinkRedemptionErrorCode!
  message: String!
}

enum MagicLinkRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  items(
    where: ItemWhereInput! = {}
    orderBy: [ItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Item!]
  item(where: ItemWhereUniqueInput!): Item
  itemsCount(where: ItemWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  messages(
    where: MessageWhereInput! = {}
    orderBy: [MessageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Message!]
  message(where: MessageWhereUniqueInput!): Message
  messagesCount(where: MessageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
