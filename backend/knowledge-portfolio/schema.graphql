type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  items(
    where: ItemWhereInput! = {}
    search: String
    sortBy: [SortItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Item!]
  _itemsMeta(
    where: ItemWhereInput! = {}
    search: String
    sortBy: [SortItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use itemsCount instead."
    )
  itemsCount(where: ItemWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    search: String
    sortBy: [SortCategoriesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CategoryOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Category!]
  _categoriesMeta(
    where: CategoryWhereInput! = {}
    search: String
    sortBy: [SortCategoriesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CategoryOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use categoriesCount instead."
    )
  categoriesCount(where: CategoryWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

type PasswordState {
  isSet: Boolean!
}

type _QueryMeta {
  count: Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  items: ItemRelateToManyInput
  categories: CategoryRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input ItemRelateToManyInput {
  create: [ItemCreateInput]
  connect: [ItemWhereUniqueInput]
  disconnect: [ItemWhereUniqueInput]
  disconnectAll: Boolean
}

input CategoryRelateToManyInput {
  create: [CategoryCreateInput]
  connect: [CategoryWhereUniqueInput]
  disconnect: [CategoryWhereUniqueInput]
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  items: ItemRelateToManyInput
  categories: CategoryRelateToManyInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

type Item {
  id: ID!
  title: String
  status: String
  description: String
  singlePage: String
  singlePageContent: Item_singlePageContent_DocumentField
  image: String
  author: User
  categories(
    where: CategoryWhereInput! = {}
    search: String
    sortBy: [SortCategoriesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CategoryOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Category!]
  _categoriesMeta(
    where: CategoryWhereInput! = {}
    search: String
    sortBy: [SortCategoriesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CategoryOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use categoriesCount instead."
    )
  categoriesCount(where: CategoryWhereInput! = {}): Int
  urlTitle: String
  url: String
}

type Item_singlePageContent_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  singlePage: String
  singlePage_not: String
  singlePage_contains: String
  singlePage_not_contains: String
  singlePage_starts_with: String
  singlePage_not_starts_with: String
  singlePage_ends_with: String
  singlePage_not_ends_with: String
  singlePage_i: String
  singlePage_not_i: String
  singlePage_contains_i: String
  singlePage_not_contains_i: String
  singlePage_starts_with_i: String
  singlePage_not_starts_with_i: String
  singlePage_ends_with_i: String
  singlePage_not_ends_with_i: String
  singlePage_in: [String]
  singlePage_not_in: [String]
  image: String
  image_not: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  image_i: String
  image_not_i: String
  image_contains_i: String
  image_not_contains_i: String
  image_starts_with_i: String
  image_not_starts_with_i: String
  image_ends_with_i: String
  image_not_ends_with_i: String
  image_in: [String]
  image_not_in: [String]
  author: UserWhereInput
  author_is_null: Boolean
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  urlTitle: String
  urlTitle_not: String
  urlTitle_contains: String
  urlTitle_not_contains: String
  urlTitle_starts_with: String
  urlTitle_not_starts_with: String
  urlTitle_ends_with: String
  urlTitle_not_ends_with: String
  urlTitle_i: String
  urlTitle_not_i: String
  urlTitle_contains_i: String
  urlTitle_not_contains_i: String
  urlTitle_starts_with_i: String
  urlTitle_not_starts_with_i: String
  urlTitle_ends_with_i: String
  urlTitle_not_ends_with_i: String
  urlTitle_in: [String]
  urlTitle_not_in: [String]
  url: String
  url_not: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  url_i: String
  url_not_i: String
  url_contains_i: String
  url_not_contains_i: String
  url_starts_with_i: String
  url_not_starts_with_i: String
  url_ends_with_i: String
  url_not_ends_with_i: String
  url_in: [String]
  url_not_in: [String]
}

input ItemWhereUniqueInput {
  id: ID
}

enum SortItemsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  singlePage_ASC
  singlePage_DESC
  image_ASC
  image_DESC
  urlTitle_ASC
  urlTitle_DESC
  url_ASC
  url_DESC
}

input ItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  description: OrderDirection
  singlePage: OrderDirection
  image: OrderDirection
  urlTitle: OrderDirection
  url: OrderDirection
}

input ItemUpdateInput {
  title: String
  status: String
  description: String
  singlePage: String
  singlePageContent: JSON
  image: String
  author: UserRelateToOneInput
  categories: CategoryRelateToManyInput
  urlTitle: String
  url: String
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input ItemsUpdateInput {
  id: ID!
  data: ItemUpdateInput
}

input ItemCreateInput {
  title: String
  status: String
  description: String
  singlePage: String
  singlePageContent: JSON
  image: String
  author: UserRelateToOneInput
  categories: CategoryRelateToManyInput
  urlTitle: String
  url: String
}

input ItemsCreateInput {
  data: ItemCreateInput
}

type Category {
  id: ID!
  name: String
  items(
    where: ItemWhereInput! = {}
    search: String
    sortBy: [SortItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Item!]
  _itemsMeta(
    where: ItemWhereInput! = {}
    search: String
    sortBy: [SortItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use itemsCount instead."
    )
  itemsCount(where: ItemWhereInput! = {}): Int
  author: User
  icon: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
  author: UserWhereInput
  author_is_null: Boolean
  icon: String
  icon_not: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  icon_i: String
  icon_not_i: String
  icon_contains_i: String
  icon_not_contains_i: String
  icon_starts_with_i: String
  icon_not_starts_with_i: String
  icon_ends_with_i: String
  icon_not_ends_with_i: String
  icon_in: [String]
  icon_not_in: [String]
}

input CategoryWhereUniqueInput {
  id: ID
}

enum SortCategoriesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  icon_ASC
  icon_DESC
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  icon: OrderDirection
}

input CategoryUpdateInput {
  name: String
  items: ItemRelateToManyInput
  author: UserRelateToOneInput
  icon: String
}

input CategoriesUpdateInput {
  id: ID!
  data: CategoryUpdateInput
}

input CategoryCreateInput {
  name: String
  items: ItemRelateToManyInput
  author: UserRelateToOneInput
  icon: String
}

input CategoriesCreateInput {
  data: CategoryCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput): User
  createUsers(data: [UsersCreateInput]): [User]
  updateUser(id: ID!, data: UserUpdateInput): User
  updateUsers(data: [UsersUpdateInput]): [User]
  deleteUser(id: ID!): User
  deleteUsers(ids: [ID!]): [User]
  createItem(data: ItemCreateInput): Item
  createItems(data: [ItemsCreateInput]): [Item]
  updateItem(id: ID!, data: ItemUpdateInput): Item
  updateItems(data: [ItemsUpdateInput]): [Item]
  deleteItem(id: ID!): Item
  deleteItems(ids: [ID!]): [Item]
  createCategory(data: CategoryCreateInput): Category
  createCategories(data: [CategoriesCreateInput]): [Category]
  updateCategory(id: ID!, data: CategoryUpdateInput): Category
  updateCategories(data: [CategoriesUpdateInput]): [Category]
  deleteCategory(id: ID!): Category
  deleteCategories(ids: [ID!]): [Category]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  email: String
  password: String
}

type SendUserPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  User(where: UserWhereUniqueInput!): User
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
  allItems(
    where: ItemWhereInput! = {}
    search: String
    sortBy: [SortItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Item!]
  Item(where: ItemWhereUniqueInput!): Item
  _allItemsMeta(
    where: ItemWhereInput! = {}
    search: String
    sortBy: [SortItemsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ItemOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use itemsCount instead."
    )
  itemsCount(where: ItemWhereInput! = {}): Int
  allCategories(
    where: CategoryWhereInput! = {}
    search: String
    sortBy: [SortCategoriesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CategoryOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Category!]
  Category(where: CategoryWhereUniqueInput!): Category
  _allCategoriesMeta(
    where: CategoryWhereInput! = {}
    search: String
    sortBy: [SortCategoriesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [CategoryOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use categoriesCount instead."
    )
  categoriesCount(where: CategoryWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
